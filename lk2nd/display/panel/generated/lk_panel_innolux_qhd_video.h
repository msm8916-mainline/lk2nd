// SPDX-License-Identifier: GPL-2.0-only
// Copyright (c) 2025 FIXME
// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
//   Copyright (c) 2014, The Linux Foundation. All rights reserved. (FIXME)

#ifndef _PANEL_INNOLUX_QHD_VIDEO_H_
#define _PANEL_INNOLUX_QHD_VIDEO_H_

#include <mipi_dsi.h>
#include <panel_display.h>
#include <panel.h>
#include <string.h>

static struct panel_config innolux_qhd_video_panel_data = {
	.panel_node_id = "qcom,mdss_dsi_innolux_qhd_video",
	.panel_controller = "dsi:0:",
	.panel_compatible = "qcom,mdss-dsi-panel",
	.panel_type = 0,
	.panel_destination = "DISPLAY_1",
	.panel_orientation = 3,
	.panel_framerate = 60,
	.panel_lp11_init = 0,
	.panel_init_delay = 0,
};

static struct panel_resolution innolux_qhd_video_panel_res = {
	.panel_width = 540,
	.panel_height = 960,
	.hfront_porch = 130,
	.hback_porch = 30,
	.hpulse_width = 2,
	.hsync_skew = 0,
	.vfront_porch = 56,
	.vback_porch = 16,
	.vpulse_width = 2,
	/* Borders not supported yet */
};

static struct color_info innolux_qhd_video_color = {
	.color_format = 24,
	.color_order = DSI_RGB_SWAP_RGB,
	.underflow_color = 0xff,
	/* Borders and pixel packing not supported yet */
};

static char innolux_qhd_video_on_cmd_0[] = {
	0x06, 0x00, 0x29, 0xc0, 0xf0, 0x55, 0xaa, 0x52,
	0x08, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_1[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb6, 0x05, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_2[] = {
	0x03, 0x00, 0x29, 0xc0, 0xb7, 0x70, 0x70, 0xff
};
static char innolux_qhd_video_on_cmd_3[] = {
	0x05, 0x00, 0x29, 0xc0, 0xb8, 0x01, 0x04, 0x04,
	0x04, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_4[] = {
	0x02, 0x00, 0x29, 0xc0, 0xbc, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_5[] = {
	0x0c, 0x00, 0x29, 0xc0, 0xc7, 0x00, 0xff, 0xff,
	0x10, 0x10, 0x0a, 0x0b, 0xff, 0xff, 0x93, 0x00
};
static char innolux_qhd_video_on_cmd_6[] = {
	0x06, 0x00, 0x29, 0xc0, 0xf0, 0x55, 0xaa, 0x52,
	0x08, 0x01, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_7[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb0, 0x0a, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_8[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb1, 0x0a, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_9[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb2, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_10[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb3, 0x10, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_11[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb4, 0x06, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_12[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb6, 0x44, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_13[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb7, 0x34, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_14[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb8, 0x14, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_15[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb9, 0x35, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_16[] = {
	0x02, 0x00, 0x29, 0xc0, 0xba, 0x14, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_17[] = {
	0x02, 0x00, 0x29, 0xc0, 0xc2, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_18[] = {
	0x05, 0x00, 0x29, 0xc0, 0xd0, 0x0f, 0x0f, 0x10,
	0x10, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_19[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd1, 0x00, 0x05, 0x00,
	0x11, 0x00, 0x23, 0x00, 0x38, 0x00, 0x42, 0x00,
	0x62, 0x00, 0x84, 0x00, 0xb7, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_20[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd2, 0x00, 0xe2, 0x01,
	0x21, 0x01, 0x5e, 0x01, 0xb1, 0x01, 0xfb, 0x01,
	0xfc, 0x02, 0x4a, 0x02, 0xa5, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_21[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd3, 0x03, 0x11, 0x03,
	0x53, 0x03, 0x81, 0x03, 0xa7, 0x03, 0xb7, 0x03,
	0xc5, 0x03, 0xcc, 0x03, 0xd8, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_22[] = {
	0x05, 0x00, 0x29, 0xc0, 0xd4, 0x03, 0xf6, 0x03,
	0xff, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_23[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd5, 0x00, 0x05, 0x00,
	0x0f, 0x00, 0x22, 0x00, 0x33, 0x00, 0x43, 0x00,
	0x60, 0x00, 0x7b, 0x00, 0xb2, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_24[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd6, 0x00, 0xe1, 0x01,
	0x29, 0x01, 0x68, 0x01, 0xbf, 0x02, 0x06, 0x02,
	0x0a, 0x02, 0x55, 0x02, 0xb5, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_25[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd7, 0x03, 0x15, 0x03,
	0x4d, 0x03, 0x79, 0x03, 0xa3, 0x03, 0xb1, 0x03,
	0xc3, 0x03, 0xcc, 0x03, 0xdc, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_26[] = {
	0x05, 0x00, 0x29, 0xc0, 0xd8, 0x03, 0xf1, 0x03,
	0xff, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_27[] = {
	0x11, 0x00, 0x29, 0xc0, 0xd9, 0x00, 0x05, 0x00,
	0x0e, 0x00, 0x20, 0x00, 0x32, 0x00, 0x43, 0x00,
	0x5f, 0x00, 0x79, 0x00, 0xaa, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_28[] = {
	0x11, 0x00, 0x29, 0xc0, 0xdd, 0x00, 0xd4, 0x01,
	0x1d, 0x01, 0x59, 0x01, 0xb4, 0x01, 0xec, 0x01,
	0xed, 0x02, 0x35, 0x02, 0x97, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_29[] = {
	0x11, 0x00, 0x29, 0xc0, 0xde, 0x02, 0xd5, 0x03,
	0x2d, 0x03, 0x61, 0x03, 0x9a, 0x03, 0xab, 0x03,
	0xbe, 0x03, 0xc8, 0x03, 0xd5, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_30[] = {
	0x05, 0x00, 0x29, 0xc0, 0xdf, 0x03, 0xfb, 0x03,
	0xff, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_31[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe0, 0x00, 0x01, 0x00,
	0x0c, 0x00, 0x1f, 0x00, 0x32, 0x00, 0x41, 0x00,
	0x61, 0x00, 0x80, 0x00, 0xb3, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_32[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe1, 0x00, 0xdf, 0x01,
	0x21, 0x01, 0x5b, 0x01, 0xaf, 0x01, 0xfb, 0x01,
	0xfc, 0x02, 0x4a, 0x02, 0xa8, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_33[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe2, 0x02, 0xef, 0x03,
	0x52, 0x03, 0x81, 0x03, 0xa6, 0x03, 0xb7, 0x03,
	0xc4, 0x03, 0xcb, 0x03, 0xd8, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_34[] = {
	0x05, 0x00, 0x29, 0xc0, 0xe3, 0x03, 0xf6, 0x03,
	0xff, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_35[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe4, 0x00, 0x01, 0x00,
	0x0a, 0x00, 0x1d, 0x00, 0x2e, 0x00, 0x3f, 0x00,
	0x5c, 0x00, 0x77, 0x00, 0xae, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_36[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe5, 0x00, 0xdf, 0x01,
	0x28, 0x01, 0x69, 0x01, 0xbf, 0x02, 0x04, 0x02,
	0x07, 0x02, 0x53, 0x02, 0xb3, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_37[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe6, 0x03, 0x13, 0x03,
	0x4c, 0x03, 0x79, 0x03, 0xa3, 0x03, 0xb0, 0x03,
	0xc3, 0x03, 0xcc, 0x03, 0xdc, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_38[] = {
	0x05, 0x00, 0x29, 0xc0, 0xe7, 0x03, 0xf1, 0x03,
	0xfe, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_39[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe8, 0x00, 0x01, 0x00,
	0x0a, 0x00, 0x1b, 0x00, 0x2d, 0x00, 0x3e, 0x00,
	0x5b, 0x00, 0x75, 0x00, 0xa6, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_40[] = {
	0x11, 0x00, 0x29, 0xc0, 0xe9, 0x00, 0xd1, 0x01,
	0x1a, 0x01, 0x57, 0x01, 0xb2, 0x01, 0xe9, 0x01,
	0xeb, 0x02, 0x35, 0x02, 0x95, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_41[] = {
	0x11, 0x00, 0x29, 0xc0, 0xea, 0x02, 0xd3, 0x03,
	0x2b, 0x03, 0x61, 0x03, 0x9a, 0x03, 0xab, 0x03,
	0xbe, 0x03, 0xc8, 0x03, 0xd5, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_42[] = {
	0x05, 0x00, 0x29, 0xc0, 0xeb, 0x03, 0xfb, 0x03,
	0xff, 0xff, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_43[] = {
	0x06, 0x00, 0x29, 0xc0, 0xf0, 0x55, 0xaa, 0x52,
	0x08, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_44[] = {
	0x02, 0x00, 0x29, 0xc0, 0xb3, 0x00, 0xff, 0xff
};
static char innolux_qhd_video_on_cmd_45[] = {
	0x11, 0x00, 0x05, 0x80
};
static char innolux_qhd_video_on_cmd_46[] = {
	0x29, 0x00, 0x05, 0x80
};
static char innolux_qhd_video_on_cmd_47[] = {
	0x53, 0x2c, 0x15, 0x80
};
static char innolux_qhd_video_on_cmd_48[] = {
	0x51, 0x50, 0x15, 0x80
};

static struct mipi_dsi_cmd innolux_qhd_video_on_command[] = {
	{ sizeof(innolux_qhd_video_on_cmd_0), innolux_qhd_video_on_cmd_0, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_1), innolux_qhd_video_on_cmd_1, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_2), innolux_qhd_video_on_cmd_2, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_3), innolux_qhd_video_on_cmd_3, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_4), innolux_qhd_video_on_cmd_4, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_5), innolux_qhd_video_on_cmd_5, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_6), innolux_qhd_video_on_cmd_6, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_7), innolux_qhd_video_on_cmd_7, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_8), innolux_qhd_video_on_cmd_8, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_9), innolux_qhd_video_on_cmd_9, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_10), innolux_qhd_video_on_cmd_10, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_11), innolux_qhd_video_on_cmd_11, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_12), innolux_qhd_video_on_cmd_12, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_13), innolux_qhd_video_on_cmd_13, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_14), innolux_qhd_video_on_cmd_14, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_15), innolux_qhd_video_on_cmd_15, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_16), innolux_qhd_video_on_cmd_16, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_17), innolux_qhd_video_on_cmd_17, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_18), innolux_qhd_video_on_cmd_18, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_19), innolux_qhd_video_on_cmd_19, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_20), innolux_qhd_video_on_cmd_20, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_21), innolux_qhd_video_on_cmd_21, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_22), innolux_qhd_video_on_cmd_22, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_23), innolux_qhd_video_on_cmd_23, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_24), innolux_qhd_video_on_cmd_24, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_25), innolux_qhd_video_on_cmd_25, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_26), innolux_qhd_video_on_cmd_26, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_27), innolux_qhd_video_on_cmd_27, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_28), innolux_qhd_video_on_cmd_28, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_29), innolux_qhd_video_on_cmd_29, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_30), innolux_qhd_video_on_cmd_30, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_31), innolux_qhd_video_on_cmd_31, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_32), innolux_qhd_video_on_cmd_32, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_33), innolux_qhd_video_on_cmd_33, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_34), innolux_qhd_video_on_cmd_34, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_35), innolux_qhd_video_on_cmd_35, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_36), innolux_qhd_video_on_cmd_36, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_37), innolux_qhd_video_on_cmd_37, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_38), innolux_qhd_video_on_cmd_38, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_39), innolux_qhd_video_on_cmd_39, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_40), innolux_qhd_video_on_cmd_40, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_41), innolux_qhd_video_on_cmd_41, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_42), innolux_qhd_video_on_cmd_42, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_43), innolux_qhd_video_on_cmd_43, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_44), innolux_qhd_video_on_cmd_44, 0 },
	{ sizeof(innolux_qhd_video_on_cmd_45), innolux_qhd_video_on_cmd_45, 125 },
	{ sizeof(innolux_qhd_video_on_cmd_46), innolux_qhd_video_on_cmd_46, 100 },
	{ sizeof(innolux_qhd_video_on_cmd_47), innolux_qhd_video_on_cmd_47, 1 },
	{ sizeof(innolux_qhd_video_on_cmd_48), innolux_qhd_video_on_cmd_48, 1 },
};

static char innolux_qhd_video_off_cmd_0[] = {
	0x28, 0x00, 0x05, 0x80
};
static char innolux_qhd_video_off_cmd_1[] = {
	0x10, 0x00, 0x05, 0x80
};

static struct mipi_dsi_cmd innolux_qhd_video_off_command[] = {
	{ sizeof(innolux_qhd_video_off_cmd_0), innolux_qhd_video_off_cmd_0, 150 },
	{ sizeof(innolux_qhd_video_off_cmd_1), innolux_qhd_video_off_cmd_1, 150 },
};

static struct command_state innolux_qhd_video_state = {
	.oncommand_state = 0,
	.offcommand_state = 1,
};

static struct commandpanel_info innolux_qhd_video_command_panel = {
	/* Unused, this is a video mode panel */
};

static struct videopanel_info innolux_qhd_video_video_panel = {
	.hsync_pulse = 1,
	.hfp_power_mode = 1,
	.hbp_power_mode = 0,
	.hsa_power_mode = 0,
	.bllp_eof_power_mode = 1,
	.bllp_power_mode = 1,
	.traffic_mode = 2,
	/* This is bllp_eof_power_mode and bllp_power_mode combined */
	.bllp_eof_power = 1 << 3 | 1 << 0,
};

static struct lane_configuration innolux_qhd_video_lane_config = {
	.dsi_lanes = 2,
	.dsi_lanemap = 0,
	.lane0_state = 1,
	.lane1_state = 1,
	.lane2_state = 0,
	.lane3_state = 0,
	.force_clk_lane_hs = 0,
};

static const uint32_t innolux_qhd_video_timings[] = {
	0x7d, 0x25, 0x1d, 0x00, 0x37, 0x33, 0x22, 0x27, 0x1e, 0x03, 0x04, 0x00
};

static struct panel_timing innolux_qhd_video_timing_info = {
	.tclk_post = 0x20,
	.tclk_pre = 0x2c,
};

static struct panel_reset_sequence innolux_qhd_video_reset_seq = {
	.pin_state = { 1, 0, 1 },
	.sleep = { 1, 1, 20 },
	.pin_direction = 2,
};

static struct backlight innolux_qhd_video_backlight = {
	.bl_interface_type = BL_DCS,
	.bl_min_level = 1,
	.bl_max_level = 255,
};

static inline void panel_innolux_qhd_video_select(struct panel_struct *panel,
						  struct msm_panel_info *pinfo,
						  struct mdss_dsi_phy_ctrl *phy_db)
{
	panel->paneldata = &innolux_qhd_video_panel_data;
	panel->panelres = &innolux_qhd_video_panel_res;
	panel->color = &innolux_qhd_video_color;
	panel->videopanel = &innolux_qhd_video_video_panel;
	panel->commandpanel = &innolux_qhd_video_command_panel;
	panel->state = &innolux_qhd_video_state;
	panel->laneconfig = &innolux_qhd_video_lane_config;
	panel->paneltiminginfo = &innolux_qhd_video_timing_info;
	panel->panelresetseq = &innolux_qhd_video_reset_seq;
	panel->backlightinfo = &innolux_qhd_video_backlight;
	pinfo->mipi.panel_on_cmds = innolux_qhd_video_on_command;
	pinfo->mipi.panel_off_cmds = innolux_qhd_video_off_command;
	pinfo->mipi.num_of_panel_on_cmds = ARRAY_SIZE(innolux_qhd_video_on_command);
	pinfo->mipi.num_of_panel_off_cmds = ARRAY_SIZE(innolux_qhd_video_off_command);
	memcpy(phy_db->timing, innolux_qhd_video_timings, TIMING_SIZE);
	phy_db->regulator_mode = DSI_PHY_REGULATOR_DCDC_MODE;
}

#endif /* _PANEL_INNOLUX_QHD_VIDEO_H_ */
